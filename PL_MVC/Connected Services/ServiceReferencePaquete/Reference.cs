//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PL_MVC.ServiceReferencePaquete {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePaquete.IPaquete")]
    public interface IPaquete {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Add", ReplyAction="http://tempuri.org/IPaquete/AddResponse")]
        System.ValueTuple<bool, string, System.Exception> Add(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Add", ReplyAction="http://tempuri.org/IPaquete/AddResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> AddAsync(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/GetAll", ReplyAction="http://tempuri.org/IPaquete/GetAllResponse")]
        System.ValueTuple<bool, string, ML.Paquete[], System.Exception> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/GetAll", ReplyAction="http://tempuri.org/IPaquete/GetAllResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete[], System.Exception>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/GetById", ReplyAction="http://tempuri.org/IPaquete/GetByIdResponse")]
        System.ValueTuple<bool, string, ML.Paquete, System.Exception> GetById(int idPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/GetById", ReplyAction="http://tempuri.org/IPaquete/GetByIdResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> GetByIdAsync(int idPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Update", ReplyAction="http://tempuri.org/IPaquete/UpdateResponse")]
        System.ValueTuple<bool, string, System.Exception> Update(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Update", ReplyAction="http://tempuri.org/IPaquete/UpdateResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> UpdateAsync(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Delete", ReplyAction="http://tempuri.org/IPaquete/DeleteResponse")]
        System.ValueTuple<bool, string, System.Exception> Delete(int idPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquete/Delete", ReplyAction="http://tempuri.org/IPaquete/DeleteResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> DeleteAsync(int idPaquete);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaqueteChannel : PL_MVC.ServiceReferencePaquete.IPaquete, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaqueteClient : System.ServiceModel.ClientBase<PL_MVC.ServiceReferencePaquete.IPaquete>, PL_MVC.ServiceReferencePaquete.IPaquete {
        
        public PaqueteClient() {
        }
        
        public PaqueteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaqueteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaqueteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaqueteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ValueTuple<bool, string, System.Exception> Add(ML.Paquete paquete) {
            return base.Channel.Add(paquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> AddAsync(ML.Paquete paquete) {
            return base.Channel.AddAsync(paquete);
        }
        
        public System.ValueTuple<bool, string, ML.Paquete[], System.Exception> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete[], System.Exception>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.ValueTuple<bool, string, ML.Paquete, System.Exception> GetById(int idPaquete) {
            return base.Channel.GetById(idPaquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> GetByIdAsync(int idPaquete) {
            return base.Channel.GetByIdAsync(idPaquete);
        }
        
        public System.ValueTuple<bool, string, System.Exception> Update(ML.Paquete paquete) {
            return base.Channel.Update(paquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> UpdateAsync(ML.Paquete paquete) {
            return base.Channel.UpdateAsync(paquete);
        }
        
        public System.ValueTuple<bool, string, System.Exception> Delete(int idPaquete) {
            return base.Channel.Delete(idPaquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> DeleteAsync(int idPaquete) {
            return base.Channel.DeleteAsync(idPaquete);
        }
    }
}
